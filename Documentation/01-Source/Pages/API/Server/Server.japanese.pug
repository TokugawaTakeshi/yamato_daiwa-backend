extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.japanese.pug
  include ../../../SharedComponents/SharedComponents.japanese.pug

  -

    const serverInitializationPropertiesSpecification = {
      IP_Address: {
        localizedInterpretation: "IPアドレス",
        type: "string",
        required: true
      },
      HTTP: {
        localizedInterpretation: "HTTPプロトコル関連設定",
        type: "RawConfig.HTTP",
        required: false
      },
      HTTPS: {
        localizedInterpretation: "HTTPSプロトコル関連設定",
        type: "RawConfig.HTTPS",
        required: false
      }
    };


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("Server"),
        description:
            "「Yamato Daiwa Backend」（省略：「YDB」）というNode.jsフレームワークの「Server」クラスはHTTPリクエストを受けているサーバアプリケーションの" +
              "初期化機能を確保し、HTTPSプロトコルの対応は付き。"
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("localizedSectioning.API.Server");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.API.$children.Server.$URI,
      russian: routing.russian.API.$children.Server.$URI
    });

    const localizedSectioning = routing.japanese.API.$children.Server.$sectioning;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ 「`Server`」クラス ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1!= localizedRouting.API.$children.Server.$heading

    +ThisPageHasNotBeenCheckedByNativeSpeakersYetWarning

    +CompactTableOfContents--YDF_DK(localizedSectioning, { mustApplyAnchorsInsteadOfURIs: true })

    p.Article-Paragraph.
      #[+Term--YDID HTTPリクエスト]（#[+Term--YDID HTTPSプロトコル]を#[+Keyword--YDID 含めて]）の処理機能を提供している、当フレームワークの
        主要な#[+Term--YDID クラス]である。


    //- ━━━ パブリック静的メソッド ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.publicStaticMethods.$heading,
      HTML_ID: localizedSectioning.publicStaticMethods.$anchor
    }).Article-Heading2

    //- ─── `initializeAndStart` ───────────────────────────────────────────────────────────────────────────────────────
    +CallableExpressionScheme--YDF_DK({
      technicalName: "initializeAndStart",
      localizedDescriptiveHeading: "初期化して起動",
      headingTag: "h3",
      parametersSpecification: [
        {
          genericTechnicalName: "rawConfiguration",
          localizedName: "設定",
          type: "Server.RawConfiguration",
          required: true
        }
      ],
      returnedValue: "Server"
    })(
      id=localizedSectioning.publicStaticMethods.$children.initializeAndStart.$anchor
    )
      +ObjectTypeAbstract--YDF_DK({
        typeName: "Server.RawConfiguration",
        localizedDescriptiveHeading: "サーバの設定",
        propertiesSpecification: serverInitializationPropertiesSpecification
      })

    p.Article-Paragraph.
      #[+Keyword--YDID 単一の]#[+Term--YDID 引数]で渡された設定通りサーバアプリケーションを初期化し、起動する。
      #[+Keyphrase--YDID 一番簡単な場合]だと、下記の様なコードに成る。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


        Server.initializeAndStart({
          IP_Address: "127.0.0.1",
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });


    //- ─── `initialize` ───────────────────────────────────────────────────────────────────────────────────────────────
    +CallableExpressionScheme--YDF_DK({
      technicalName: "initialize",
      localizedDescriptiveHeading: "初期化する",
      headingTag: "h3",
      parametersSpecification: [
        {
          genericTechnicalName: "rawConfiguration",
          localizedName: "設定",
          type: "Server.RawConfiguration",
          required: true
        }
      ],
      returnedValue: "Server"
    })(
      id=localizedSectioning.publicStaticMethods.$children.initialize.$anchor
    )
      +ObjectTypeAbstract--YDF_DK({
        typeName: "Server.RawConfiguration",
        localizedDescriptiveHeading: "サーバの設定",
        propertiesSpecification: serverInitializationPropertiesSpecification
      })

    p.Article-Paragraph.
      #[+Keyword--YDID 単一の]#[+Term--YDID 引数]で渡された設定通りサーバアプリケーションの初期化はするが、起動は#[+Keyword--YDID しない]。
      起動は後ほど#[+ImportantEntity__Code--YDID start]#[+Keyword--YDID 非静的な]#[+Term--YDID メソッド]で実行可能。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


        const serverApplication: Server = Server.initialize({
          IP_Address: "127.0.0.1",
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });

        // ...

        serverApplication.start();


    //- ━━━ パブリック・インスタンス・メソッド ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.publicInstanceMethods.$heading,
      HTML_ID: localizedSectioning.publicInstanceMethods.$anchor
    }).Article-Heading2

    //- ─── `start` ────────────────────────────────────────────────────────────────────────────────────────────────────
    +CallableExpressionScheme--YDF_DK({
      technicalName: "start",
      localizedDescriptiveHeading: "起動",
      headingTag: "h3",
      returnedValue: "Server"
    })(
      id=localizedSectioning.publicInstanceMethods.$children.start.$anchor
    )

    p.Article-Paragraph.
      #[+ImportantEntity__Code--YDID Server]#[+Term--YDID クラス]の#[+Term__Contrast--YDID インスタンス]で代表されている
        サーバアプリケーションのインスタンスを実行する。
      #[+Term--YDID クラス]の#[+Term__Contrast--YDID インスタンス]を、#[+Keyword--YDID 事前に]
        #[+ImportantEntity__Code--YDID initialize]と言う#[+Keyword--YDID 静的]#[+Term--YDID メソッド]で
        取得#[+Keyword--YDID しなければいけない]。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


        const serverApplication: Server = Server.initialize({
          IP_Address: "127.0.0.1",
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });

        // ...

        serverApplication.start();


    //- ━━━ 関連型 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.relatedTypes.$heading,
      HTML_ID: localizedSectioning.relatedTypes.$anchor
    }).Article-Heading2

    //- ─── `Server.RawConfig` ─────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      innerHTML: localizedSectioning.relatedTypes.$children.RawConfig.$heading,
      HTML_ID: localizedSectioning.relatedTypes.$children.RawConfig.$anchor
    }).Article-Heading3

    +ObjectTypeAbstract--YDF_DK({
      typeName: "Server.RawConfiguration",
      localizedDescriptiveHeading: "サーバの設定",
      propertiesSpecification: serverInitializationPropertiesSpecification
    })

    p.Article-Paragraph.
      #[+Keyword--YDID オブジェクト型]であり、エンジニアが意識してなければいけないものは必須#[+Term--YDID プロパティ]に成っている様に設計された。


    //- ─── `IP_Address` ───────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      innerHTML: localizedSectioning.relatedTypes.$children.RawConfig.$children.IP_Address.$heading,
      HTML_ID: localizedSectioning.relatedTypes.$children.RawConfig.$children.IP_Address.$anchor
    }).Article-Heading4

    +PropertyMetadata--YDF_DK(serverInitializationPropertiesSpecification.IP_Address)

    p.Article-Paragraph.
      飛んでくる#[+Term--YDID HTTPリクエスト]の受付が行われる妥当な#[+Term--YDID IPアドレス]を含まなければいけない#[+Keyword--YDID 必須]
        #[+Term--YDID プロパティ]。
      単一の#[+Term--YDID リクエストハンドラ]及び#[+Term--YDID HTTPSプロトコル]対応#[+Keyword--YDID 無し]の#[+Keyphrase--YDID 一番簡単な]
        例だと、下記の様に成る。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


        Server.initializeAndStart({
          IP_Address: "127.0.0.1",
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });


    //- ─── `HTTP` ─────────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      innerHTML: localizedSectioning.relatedTypes.$children.RawConfig.$children.HTTP.$heading,
      HTML_ID: localizedSectioning.relatedTypes.$children.RawConfig.$children.HTTP.$anchor
    }).Article-Heading4

    +PropertyMetadata--YDF_DK(serverInitializationPropertiesSpecification.HTTP)

    +ObjectTypeAbstract--YDF_DK({
      typeName: "RawConfig.HTTP",
      localizedDescriptiveHeading: "HTTPプロトコル設定",
      propertiesSpecification: {
        port: {
          localizedInterpretation: "ポート番号",
          type: Number,
          numberSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: true
        }
      }
    })

    p.Article-Paragraph.
      #[+Term--YDID HTTPプロトコル]を対応したい場合、当設定の群を指定する事。

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning, SVG_Icon: true }).
      現在のセキュリティの要件は#[+Term--YDID HTTPSプロトコル]を#[+Keyword--YDID 標準]と見做し、
        #[+Keyphrase--YDID 機密データの漏洩を伴う恐れが有る]暗号化#[+Keyword--YDID 無し]の情報送信の為#[+Term--YDID HTTPプロトコル]
        は#[+Keyword--YDID 危険]だと認められた。
      それで、例えローカル開発の段階でも、#[+Term--YDID プロトコルHTTP]の利用は#[+Keyword--YDID 非推薦]と成っている。

    p.Article-Paragraph.
      現在、当設定群の単一の設定は#[+Term--YDID HTTPポート]番号（#[+ImportantEntity__Code--YDID port]#[+Term--YDID プロパティ]）
        である。
      何方の#[+Term--YDID ポート]番号で#[+Term--YDID HTTPリクエスト]が聞かれる事に成るか、エンジニアに意識させる為に#[+Keyword--YDID 必須]にされた。
      #[+Term--YDID HTTPプロトコル]にとって#[+Keyword--YDID 規定の]#[+Term--YDID ポート]番号で良い場合、
        #[+ImportantEntity__Code--YDID ProtocolDependentDefaultPorts]#[+Term--YDID 列挙]を使うと良い。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


        Server.initializeAndStart({
          IP_Address: "127.0.0.1",
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });


    //- ─── `HTTPS` ────────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 4,
      innerHTML: localizedSectioning.relatedTypes.$children.RawConfig.$children.HTTPS.$heading,
      HTML_ID: localizedSectioning.relatedTypes.$children.RawConfig.$children.HTTPS.$anchor
    }).Article-Heading4

    +PropertyMetadata--YDF_DK(serverInitializationPropertiesSpecification.HTTPS)

    +ObjectTypeAbstract--YDF_DK({
      typeName: "RawConfig.HTTPS",
      localizedDescriptiveHeading: "HTTPSプロトコル設定",
      propertiesSpecification: {
        port: {
          localizedInterpretation: "ポート番号",
          type: Number,
          numberSet: RawObjectDataProcessor.NumbersSets.nonNegativeInteger,
          required: true
        },
        SSL_KeyFileRelativeOrAbsolutePath: {
          localizedInterpretation: "SLLキーへのパス（絶対か相対）",
          type: String,
          requiredIf: {
            descriptionForLogging: "「SSL_Key」プロパティが指定されなかった"
          }
        },
        SSL_Key: {
          localizedInterpretation: "SLL証明書",
          type: String,
          required: false
        },
        SSL_CertificateFileRelativeOrAbsolutePath: {
          localizedInterpretation: "SLL証明書へのパス（絶対か相対）",
          type: String,
          requiredIf: {
            descriptionForLogging: "「SSL_Certificate」プロパティが指定されなかった"
          }
        },
        SSL_Certificate: {
          localizedInterpretation: "SLLキー",
          type: String,
          required: false
        }
      }
    })

    p.Article-Paragraph.
      #[+Term--YDID HTTPSプロトコル]を対応したい場合、当設定の群を指定する事。
      現在のセキュリティの要件に依ると、此の#[+Term--YDID プロトコル]#[+Keyword--YDID こそ]利用する#[+Keyword--YDID べき]。

    p.Article-Paragraph.
      現在は#[+ImportantEntity--YDID 5件]の項目が有り、これ等の中に#[+Keyword--YDID 非相互的な]#[+ImportantEntity--YDID 2組み]が有る。
      #[+Term--YDID HTTPSポート]番号と他に、#[+Term--YDID SSL証明書]・#[+Term--YDID SSLキー]（ファイルの相対パスか、もっと安全である絶対パス、
        若しくは#[+Term--YDID SSL証明書]・#[+Term--YDID SSLキー]を代表している#[+Term--YDID 文字列]）を指定
        #[+Keyword--YDID しなければいけない]。
      下記、それぞれの場合にとって簡単な例を提供。

    +CodeViewer--YDF

      +CodeViewer-Listing--YDF({
        fileLabel: "SSL証明書・キーをファイルからの読み込み",
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";
        import Path from "path";


        Server.initializeAndStart({
          IP_Address: "127.0.0.1",
          HTTPS: {
            port: ProtocolDependentDefaultPorts.HTTPS,
            SSL_CertificateFileRelativeOrAbsolutePath: Path.resolve(__dirname, "./SSL/SSL_Certificate.pem"),
            SSL_KeyFileRelativeOrAbsolutePath: Path.resolve(__dirname, "./SSL/SSL_Key.pem")
          },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(_request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });

      +CodeViewer-Listing--YDF({
        fileLabel: "事前に文字列化したSSL証明書・キー",
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript
      }): :code_listing--yda
        import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
        import { HTTP_Methods } from "@yamato-daiwa/es-extensions";
        import Path from "path";
        import { secrets } from "docker-secret";


        Server.initializeAndStart({
          IP_Address: "127.0.0.1",
          HTTPS: {
            port: ProtocolDependentDefaultPorts.HTTPS,
            SSL_Key: secrets.SSL_KEY,
            SSL_Certificate: secrets.SSL_CERTIFICATE
          },
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
              async handler(_request: Request, response: Response): Promise<void> {
                return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
              }
            }
          ]
        });

    p.Article-Paragraph.
      #[+Term--YDID SSLキー]且つ#[+Term--YDID SSL証明書]は勿論、事前に用意しておく必要が有る。
    //-
      //- ─── `routing` ──────────────────────────────────────────────────────────────────────────────────────────────────
      +Heading--YDF({
        level: 4,
        innerHTML: localizedSectioning.relatedTypes.$children.RawConfig.$children.routing.$heading,
        HTML_ID: localizedSectioning.relatedTypes.$children.RawConfig.$children.routing.$anchor
      }).Article-Heading4
