extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Data

  include _HelloWorldTutorialPage-Data.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("Hello, world!"),
        description:
            "Минимальный пример серверного приложения, написанного с использованием Node.js-фреймворка " +
              "«Yamato Daiwa Backend» (сокращённо: «YDB»)."
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("tutorials.helloWorld");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.tutorials.$children.helloWorld.$URI,
      japanese: routing.japanese.tutorials.$children.helloWorld.$URI
    });

    const localizedSectioning = routing.russian.tutorials.$children.helloWorld.$sectioning;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ Простейший пример «Привет, мир!» ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1= localizedRouting.tutorials.$children.helloWorld.$heading

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning, SVG_Icon: true }).
      Структура проекта и код, представленные в этом уроке #[+Keyword--YDID предельно]
      #[+Keyword__Contrast--YDID упрощены] в целях оптимизации под учебный материал, а потому
      #[+Keyphrase--YDID #[+Keyword--YDID не]&nbsp;предназначены для продакшена].
      Чтобы использовать полученные знания на практике, #[+Keyword--YDID необходимо] понять материал урока и
        адаптировать примеры кода под Ваши задачи и стилистические требования.

    //- ━━━ Требуемые знания и навыки ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.preRequirements.$heading,
      HTML_ID: localizedSectioning.preRequirements.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Здесь и далее подразумевается, что Вы уже умеете/знаете:

    ul.Article-UnorderedList

      li.
        Создавать #[+ImportantEntity--YDID Node.js]-проект и устанавливать #[+Term--YDID npm-зависимости]
          (если нет, то Вам сначала следует изучить #[+Keyword--YDID основы] #[+ImportantEntity--YDID Node.js]).

      li.
        Настраивать компилятор языка #[+ImportantEntity--YDID TypeScript]
          (фреймворк #[+ImportantEntity--YDID Yamato Daiwa Backend] (далее: #[+ImportantEntity--YDID YDB]) предполагает
          использование языка #[+ImportantEntity--YDID TypeScript],
          причём #[+Keyphrase--YDID без #[+Term--YDID типа] #[+ImportantEntity__Code--YDID any]]).

      li.
        Основы #[+Term--YDID Объектно-Ориентированного Программирования] (#[+Term--YDID ООП]) —
          предлагаемые #[+ImportantEntity--YDID Yamato Daiwa Backend] подходы предполагают широкое использование
          #[+Term--YDID ООП].
        Хотя #[+ImportantEntity--YDID YDB] #[+Keyword--YDID не]&nbsp;навязывает конкретной архитектуры, использование
          #[+Term--YDID ООП] желательно, а потому будет в следующих уроках.


    //- ━━━ Развёртывание Node.js-проекта ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.projectRollout.$heading,
      HTML_ID: localizedSectioning.projectRollout.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Создайте новый #[+Term--YDID Node.js-проект] и установите приведённые ниже #[+Term--YDID npm-зависимости].
      Во избежание проблем, связанных с меняющимся программным интерфейсом по мере выхода новых версией этих
        #[+Term--YDID зависимостей], #[+Keyphrase--YDID в рамках данного урока] настоятельно рекомендуется устанавливать
        версии, указанные в квадратных скобках.

    dl.Article-DescriptionList

      dt= `@yamato-daiwa/backend [${ DependenciesVersions["@yamato-daiwa/backend"] }]`
      dd Главный #[+Term--YDID npm-пакет] данного фреймворка

      dt= `@yamato-daiwa/es-extensions [${ DependenciesVersions["@yamato-daiwa/es-extensions"] }]`
      dd.
        Вспомогательная функциональность, которая актуальна как для #[+ImportantEntity--YDID Node.js], так и для
          #[+ImportantEntity--YDID браузерного JavaScript-а].
        В данном уроке нам потребуется лишь #[+Term--YDID перечисление] #[+ImportantEntity--YDID HTTP_Methods],
          но в будущем — гораздо больше.

      dt= `ts-node [${ DependenciesVersions["ts-node"] }]`
      dd.
        #[+Link--YDF({ unendorsedExternalURI: "https://ru.wikipedia.org/wiki/REPL" }).Article-Link REPL] для языка
          #[+ImportantEntity--YDID TypeScript].
        Создаёт эффект того, что #[+ImportantEntity--YDID TypeScript] имеет собственную #[+Term--YDID среду выполнения],
          что позволит нам на время этого урока рутины, связанные с выходными #[+Term--YDID JavaScript-файлами].

      dt= `typescript [${ DependenciesVersions.typescript }]`
      dd.
        Основной #[+Term--YDID npm-пакет] языка #[+ImportantEntity--YDID TypeScript].
        #[+ImportantEntity--YDID ts-node] требует #[+Keyword--YDID отдельной] установки этого пакета
          (говоря терминологией #[+ImportantEntity--YDID npm], #[+ImportantEntity--YDID typescript] является
          #[+Term--YDID одноранговой зависимостью] по отношению к #[+ImportantEntity--YDID ts-node]).
        Хотя в современный #[+ImportantEntity--YDID npm] устанавливает #[+Term--YDID одноранговые зависимости]
          автоматически, мы будем осознанно устанавливать #[+Keyword--YDID конкретную] версию этого #[+Term--YDID пакета].

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash })
        | #{ dependenciesInstalationConsoleCommand }

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash }).
        npm i ts-node@#{ DependenciesVersions["ts-node"] } typescript@#{ DependenciesVersions.typescript } -D


    //- ━━━ Код ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.code.$heading,
      HTML_ID: localizedSectioning.code.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Это приложение отправит #[+Term--YDID HTML-код], состоящий из заголовка #[+SecondaryEntity__Code--YDID h1] с
        текстовым содержимым #[+SecondaryEntity__Code--YDID «Hello, world!»] в ответ на #[+Term--YDID HTTP-запрос] типа
        #[+Term__Contrast--YDID GET] по адресу #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/].
      Вообще, такой код #[+Keyword--YDID не]&nbsp;является валидной #[+Term--YDID HTML-страницей], но
        в тестовых целях отправка одного только #[+Term--YDID тела HTML-документа] возможна — современные браузеры
        его отобразят.
      Перед тем, как отправить #[+Term--YDID запрос], разберём код данного простейшего примера.

    +CodeViewer--YDF

      +CodeViewer-TabPanel--YDF({
        codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript,
        fileLabel: "Source code"
      })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
          import { HTTP_Methods } from "@yamato-daiwa/es-extensions";


          Server.initializeAndStart({
        +CodeViewer-Explanation--YDF
          | #[+Term--YDID Статический метод] #[+SecondaryEntity__Code--YDID initializeAndStart] #[+Term--YDID класса]
          |   #[+SecondaryEntity__Code--YDID Server] принимает
          |
          +Link--YDF({
            internalURI: localizedRouting.API.$children.Server.$sectioning.relatedTypes.$children.RawConfig.$URI
          }).Article-Link объект конфигурации
          |   в качестве #[+Keyphrase--YDID первого и единственного] #[+Term--YDID параметра].
          | Перевод имени #[+Term--YDID метода] с английского языка «инициализировать и запустить» вкупе с контекстом
          |   #[+SecondaryEntity__Code--YDID Server] («сервер») не&nbsp;должен оставлять вопросов о том, что этот
          | метод делает.

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="2" indentationString="  ")
          IP_Address: "127.0.0.1",
        +CodeViewer-Explanation--YDF
          | #[+Term--YDID Свойство] #[+ImportantEntity__Code--YDID IP_Address] сделано #[+Keyword--YDID обязательным]
          |   #[+Keyword--YDID не]&nbsp;случайно, потому что Вы как инженер #[+Keyword--YDID обязаны] понимать,
          |   по какому #[+Term--YDID IP-адресу] хотите сделать доступным своё серверное приложение.
          | Если говорить о реальном проекте, то #[+Term--YDID IP-адрес] будет зависеть от режима (локальная разработка,
          |   инсценирование, продакшен).
          | В будущих уроках мы обсудим, как эту опцию сделать зависимой от режима, а сейчас установим значение
          |   #[+SecondaryEntity--YDID 127.0.0.1] — первый адрес в диапазоне
          |
          +Link--YDF({
            unendorsedExternalURI: "https://ru.wikipedia.org/wiki/Localhost"
          }).Article-Link частных IP-адресов
          | .

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="2" indentationString="  ")
          HTTP: { port: ProtocolDependentDefaultPorts.HTTP },
        +CodeViewer-Explanation--YDF.
          #[+ImportantEntity--YDID 80] — значение #[+ImportantEntity__Code--YDID ProtocolDependentDefaultPorts.HTTP] —
            это номер #[+Term--YDID порта] #[+Keyword--YDID по умолчанию] #[+Keyphrase--YDID для #[+Term--YDID протокола HTTP]].
          Указывать его явно нужно по той же причине, что и #[+ImportantEntity__Code--YDID IP_Address], однако
            поскольку полагаться на человеческую память #[+Keyword--YDID опасно], номера #[+Term--YDID портов]
            по умолчанию для разных #[+Term--YDID протоколов] были помещены в #[+Term--YDID перечисление]
            #[+ImportantEntity__Code--YDID ProtocolDependentDefaultPorts], а от Вас лишь требуется осознавать,
            на #[+Term--YDID порту] по умолчанию будет доступно приложение или же на каком-то другом.

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="2" indentationString="  ")
          routing: [
            {
              route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
        +CodeViewer-Explanation--YDF.
          Свойство #[+ImportantEntity__Code--YDID routing], как это очевидно и должно быть очевидно при качественном
            именовании, позволяет определить #[+DefinableTerm--YDID роутинг] —
            #[+Keyphrase--YDID в контексте #[+Term--YDID серверной веб-разработки]], формирование различных
            #[+Term--YDID ответов] в зависимости от соответствия #[+Term--YDID запроса] конкретным шаблонам
            #[+Term--YDID URI].
          Мы разберём #[+Term--YDID роутинг] подробнее в одном из следующих уроков, а сейчас важно лишь то, что мы
            будем отправлять ответ только для #[+Keyword--YDID одного], #[+Keyword__Contrast--YDID корневого]
            #[+Term--YDID маршрута], соответствующего #[+Term--YDID URI]
            #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/].
          По #[+Keyword--YDID всем] #[+Keyword__Contrast--YDID остальным] #[+Term--YDID маршрутам], скажем
            #[+SecondaryEntity__Code--YDID /foo] (соответствует #[+Term--YDID URI]
            #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/foo]) или #[+SecondaryEntity__Code--YDID /bar/baz]
            (соответствует #[+Term--YDID URI] #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/bar/baz]),
            сервер отправит #[+Term--YDID ответ] с ошибкой «не найдено».

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="4" indentationString="  ")
          async handler(request: Request, response: Response): Promise<void> {
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            #[+DefinableTerm--YDID handler] — #[+Term--YDID обработчик запроса] — определяет, какие действия нужно
              выполнить,　когда отправленный #[+Term--YDID запрос] удовлетворяет #[+Term--YDID маршруту], указанному выше
              в #[+ImportantEntity__Code--YDID route].
            Это #[+Term--YDID функция] #[+Keyword--YDID априори] #[+Term--YDID асинхронная] (явно
              #[+Keyword--YDID или] неявно　возвращает #[+Term--YDID экземпляр]　#[+ImportantEntity__Code--YDID Promise],
              хотя с точки зрения #[+ImportantEntity__Code--YDID ECMAScript] это #[+Keyword--YDID не]&nbsp;совсем
              точное определение, так как #[+Term--YDID функции], получающие через #[+Term--YDID параметры]
              #[+Term--YDID коллбэки] — #[+Term--YDID функции] для их вызова по завершению какого-либо процесса —
              тоже называют «асинхронными»), так как отправка #[+Term--YDID ответа],　которую надо в итоге сделать,　
              является #[+Keyword--YDID асинхронной] по своей природе.
            К тому же, в #[+Term--YDID обработчике запроса] часто выполняются и другие асинхронные операции,
              например обращение к #[+Term--YDID базе данных] или работа с файлами.

          p.Article-Paragraph.
            По сути, #[+ImportantEntity__Code--YDID route] и #[+ImportantEntity__Code--YDID handler] — это как
              #[+Term--YDID условное выражение] и действие, выполняемое когда это #[+Term--YDID выражение] истинно.

          p.Article-Paragraph.
            Обычно #[+Term--YDID ответ] формируется в зависимости от #[+Term--YDID запроса], #[+Term--YDID экземпляр]
              которого представлен #[+Keyword--YDID первым]　#[+Term--YDID параметром].
            Например, в случае #[+Term--YDID GET-запроса] нам могут понадобиться #[+Term--YDID query parameters]
              (дословно это означает «параметры запроса», но без контекста — #[+Term--YDID URI] — этот перевод
              может сильно запутать), а в случае #[+Term--YDID POST-] или #[+Term--YDID PUT-запросов] — доступ к данным,
              содержащимся с #[+Term--YDID теле запроса].
            Однако работу с #[+Term--YDID экземпляром] #[+Term__Contrast--YDID класса] #[+ImportantEntity--YDID Response]
              мы отложим на следующие, более сложные уроки, а в этом простейшем примере будем всегда отправлять один и
              тот же #[+Term--YDID ответ], потому #[+Keyword--YDID первый] #[+Term--YDID параметр]
              #[+Keyword--YDID не]&nbsp;будет использован.

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="5" indentationString="  ")
          return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
        +CodeViewer-Explanation--YDF
          p.Article-Paragraph.
            Как известно, #[+Term--YDID HTTP-ответ] имеет #[+Term__Contrast--YDID статус], идентифицируемый
              #[+Keyword--YDID трёхзначным]　шифром.
            Сейчас важно, что эти #[+Term--YDID статусы] разделяются на #[+ImportantEntity--YDID 5] групп:

          ol.Article-OrderedList
            li Информационные
            li Успешные
            li Перенаправления
            li Клиентские ошибки
            li Серверные ошибки

          p.Article-Paragraph.
            #[+Term--YDID Метод] #[+ImportantEntity__Code--YDID submitWithSuccess] #[+Term--YDID класса]
              #[+ImportantEntity__Code--YDID Response] отправляет #[+Term--YDID ответ] с кодом из «успешного» диапазона
              (по умолчанию — #[+ImportantEntity__Code--YDID 200]).
            Указывая #[+Term--YDID свойство] #[+ImportantEntity__Code--YDID HTML_Content]
              #[+Keyphrase--YDID первого и единственного] #[+Term--YDID параметра] #[+Term__Contrast--YDID метода]
              #[+ImportantEntity__Code--YDID submitWithSuccess], мы сообщаем, что хотим
              отправить #[+Term--YDID HTML-код], в связи с чем фреймворк #[+Keyword--YDID автоматически] установит
              нужные #[+Term--YDID HTTP-заголовки].
        +CodeViewer-PartialListing--YDF: :code_listing--yda
                }
              }
            ]
          });


    //- ━━━ Тестирование ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.testing.$heading,
      HTML_ID: localizedSectioning.testing.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Запустим приложение с помощью #[+ImportantEntity--YDID ts-node].

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash }).
        ts-node EntryPoint.ts


    p.Article-Paragraph.
      Если в коде нет ошибок, то Вы будете проинформированы об успешном запуске приложения следующим выводом в терминал:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/00-HelloWorld/Images/ServerStartedSuccessLog",
      imageAlternateText:
          "В консоли зелёным цветом отображается сообщение об успешном запуске веб-приложения, озаглавленное " +
            "«The serving of HTTP requests started» — «Обслуживание HTTP-запросов стартовало». " +
          "Веб-приложение написано на Node.js/TypeScript с использованием фреймворка «Yamato Daiwa Backend» " +
            "(сокращённо: «YDB»).",
      autoAspectRatioByYDA: true
    })


    p.Article-Paragraph.
      Откройте указанный #[+Term--YDID URI] в браузере.
      Если Ваш терминал распознаёт ссылки, то Вы можете по ней перейти кликом мыши.
      В терминале отобразится #[+Keyphrase--YDID как минимум] #[+Keyword--YDID один] лог о новом #[+Term--YDID запросе]
        по #[+Keyword--YDID корневому] #[+Term--YDID маршруту]:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/00-HelloWorld/Images/RootRouteRequestInfoLog",
      imageAlternateText:
          "В консоли синим цветом отображается сообщение о регистрации get-запроса по корневому маршруту, озаглавленное " +
            "«New request» — «Новый запрос». " +
          "Веб-приложение написано на Node.js/TypeScript с использованием фреймворка «Yamato Daiwa Backend» " +
            "(сокращённо: «YDB»).",
      autoAspectRatioByYDA: true
    })


    p.Article-Paragraph.
      Возможно, будет логирован ещё один #[+Term--YDID запрос] по #[+Term__Contrast--YDID маршруту]
        #[+ImportantEntity__Code--YDID /favicon.ico]:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/00-HelloWorld/Images/FaviconRequestInfoLog",
      imageAlternateText:
          "В консоли синим цветом отображается сообщение о регистрации get-запроса по маршруту \"/favicon\", " +
            "озаглавленное «New request» — «Новый запрос». " +
          "Веб-приложение написано на Node.js/TypeScript с использованием фреймворка «Yamato Daiwa Backend» " +
            "(сокращённо: «YDB»).",
      autoAspectRatioByYDA: true
    })

    p.Article-Paragraph
      | Если такой лог присутствует, значит соответствующий запрос был отправлен браузером #[+Keyword--YDID автоматически],
      |   чтобы отобразить
      |
      +Link--YDF({
        unendorsedExternalURI: "https://ru.wikipedia.org/wiki/Favicon"
      }).Article-Link иконку на вкладке браузера
      | .
      | Если бы #[+Term--YDID фреймворк] не&nbsp;был готов к такому запросу, то отправил #[+Term--YDID ответ] с ошибкой
      |   «не найдено», однако #[+Term--YDID фреймворк] #[+ImportantEntity--YDID YDB] #[+Keyword--YDID по умолчанию]
      |   отправляет свою иконку.
      | Разумеется, её можно заменить на другую, что мы и сделаем в одном из будущих уроков.

    p.Article-Paragraph.
      Поскольку #[+ImportantEntity--YDID localhost] является «местоимением» для #[+Term--YDID IP-адреса]
        #[+ImportantEntity__Code--YDID 127.0.0.1], а #[+ImportantEntity--YDID 80] — #[+Term--YDID порт]
        #[+Keyphrase--YDID по умолчанию] для #[+Term--YDID протокола HTTP], то помимо
        #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/] мы можем отправлять #[+Term--YDID запросы]
        на #[+SecondaryEntity__Code--YDID http://localhost], #[+SecondaryEntity__Code--YDID http://localhost:80] или
        #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/].

    p.Article-Paragraph.
      Наконец, посмотрим как фреймворк поведёт себя, когда будет отправлен #[+Term--YDID запрос], обработка которого
        #[+Keyword--YDID не]&nbsp;прописана в #[+ImportantEntity__Code--YDID routing].
      Например, для #[+Term--YDID запроса] #[+SecondaryEntity__Code--YDID http://127.0.0.1:80/foo] лог будет таким:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/00-HelloWorld/Images/ServerErrorLog",
      imageAlternateText:
          "В консоли синим цветом отображается сообщение о регистрации get-запроса по маршруту \"/foo\", " +
            "озаглавленное «New request» — «Новый запрос», а также красным цветом — сообщение о том, что данный " +
            "запрос ссылается на неизвестный ресурс (озаглавлено «Requested resource not found» — «запрашиваемый ресурс " +
            "не найден»). " +
          "Веб-приложение написано на Node.js/TypeScript с использованием фреймворка «Yamato Daiwa Backend» " +
            "(сокращённо: «YDB»).",
      autoAspectRatioByYDA: true
    })

    p.Article-Paragraph.
      Фреймворк сообщил, что запрашиваемый ресурс не&nbsp;найден.
      Аналогичное сообщение должен показать браузер — на основании отправленного #[+Term--YDID статуса ответа]
        #[+ImportantEntity--YDID 404 Not found].
