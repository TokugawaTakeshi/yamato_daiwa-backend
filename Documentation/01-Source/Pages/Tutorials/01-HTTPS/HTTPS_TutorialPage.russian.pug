extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -


    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("Использование HTTPS"),
        description:
            "Node.js-фреймворк «Yamato Daiwa Backend» (сокращённо: «YDB») имеет поддержку протокола HTTPS «из коробки», " +
              "при этом с лаконичным синтаксисом."
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("tutorials.HTTPS");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.tutorials.$children.HTTPS.$URI,
      japanese: routing.japanese.tutorials.$children.HTTPS.$URI,
    });

    const localizedSectioning = routing.russian.tutorials.$children.HTTPS.$sectioning;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ Использование HTTPS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1= localizedRouting.tutorials.$children.HTTPS.$heading

    //- ━━━ Теория ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.theory.$heading,
      HTML_ID: localizedSectioning.theory.$anchor
    }).Article-Heading2

    p.Article-Paragraph
      | #[+Keyphrase--YDID Для режима локальной разработки] #[+Term--YDID протокола HTTP] может быть
      |   достаточно, однако
      |
      +Keyphrase--YDID.
        использовать его на продакшене #[+Keyword--YDID крайне] #[+Keyword__Contrast--YDID не] рекомендуется
      | .
      | Передача данных (в том числе паролей, номеров кредитных карт и любой другой конфиденциальной информации) с
      |   помощью #[+Term--YDID протокола HTTP] осуществляется в #[+Keyword--YDID открытом] (незашифрованном) виде, что
      |   делает их уязвимыми к перехвату с помощью вредоносного программного обеспечения,
      |   #[+Keyphrase--YDID обнаружить которое с вероятностью 100% не&nbsp;способен ни&nbsp;один антивирус].
      | Но даже у Ваc простой сайт, не&nbsp;работающий с личными данными, #[+Term--YDID поисковые системы] занизят его
      |   рейтинг, если Вы используйте #[+Term--YDID протокол HTTP].

    p.Article-Paragraph.
      Стандартным решением этой проблемы является #[+DefinableTerm--YDID протокол HTTPS] — #[+Keyword--YDID расширение]
        #[+Term--YDID HTTP], использующее #[+Term--YDID криптографические протоколы] #[+ImportantEntity--YDID SSL/TLS]
        для обеспечения конфиденциальности обмена данными.
      Именно потому, что #[+Term--YDID HTTPS] является #[+Keyword--YDID расширением] #[+Term--YDID HTTP], несмотря
        на использование #[+Term--YDID протокола HTTPS] по-прежнему актуальны такие термины, как
        #[+Term--YDID «HTTP-запрос»].
      Однако для того, чтобы магия #[+Term--YDID HTTPS] работала, во-первых, #[+Keyword--YDID необходимо] подготовить:

    dl.Article-DescriptionList

      dt Цифровой сертификат
      dd.
        Большая #[+Term--YDID последовательность символов], которая идентифицирует #[+Term--YDID сервер] и по которой
          браузер либо другое программное обеспечение с функцией отправки #[+Term--YDID HTTP-запросов] могут судить о
          том, насколько безопасен обмен данных с #[+Term--YDID сервером].

      dt Закрытый ключ
      dd.
        Большая #[+Term--YDID последовательность символов], которую #[+Term--YDID сервер] сервер использует при
          установлении доверительного соединения с клиентом.

    p.Article-Paragraph.
      И #[+Term--YDID цифровой сертификат], и #[+Term--YDID закрытый ключ] могут храниться на локальном компьютере или
        сервере в виде файлов, однако в конечном счёте работа осуществляется именно с
        #[+Term--YDID последовательностями символов].

    p.Article-Paragraph.
      #[+Keyphrase--YDID В случае продакшена] #[+Term--YDID цифровой сертификат] и #[+Term__Contrast--YDID закрытый ключ]
        #[+Keyword--YDID необходимо] (ввиду требований к безопасности) #[+Keyword__Contrast--YDID приобретать]
        #[+Keyphrase--YDID на регулярной основе] из-за их #[+Keyword--YDID ограниченного] срока действия.
      Обычно их можно приобрести у поставщиков услуг по сдаче #[+Term--YDID серверов] в аренду, с которыми Вам, скорее
        всего, предстоит иметь дело.
      Существуют как платные, так и бесплатные пары #[+Term--YDID сертификат-ключ], при этом, к счастью, в современности
        #[+Keyword--YDID платные] нужны в основном для сайтов и приложений с повышенными требованиями к безопасности
        (например, банковских онлайн сервисов, сайты по оказанию госуслуг и так далее).

    p.Article-Paragraph.
      #[+Keyphrase--YDID Для режима локальной разработки] #[+Term--YDID сертификат] и #[+Term--YDID ключ] можно
        выпустить #[+Keyword--YDID самостоятельно].
      Процесс их выпуска прост, куда сложнее объясниться с браузером, что самовыпущенной паре
        #[+Term--YDID ключ-сертификат] можно доверять.
      Самовыпущенная пара #[+Term--YDID сертификат-ключ] даёт #[+Keyphrase--YDID такой же] уровень защиты, что и
        приобретаемые, однако браузеры учитывают, кем они были выпущены, и если уровень доверия окажется недостаточным,
        то Вы увидите в браузере примерно такое сообщение:

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/01-HTTPS/Images/ConnectionIsNotPrivateBrowserError.russian",
      imageAlternateText:
          "Браузер сообщает: «Ваше подключение не защищено». " +
          "Причиной этого может быть недоверие браузера к выпущенному SLL-сертификату.",
      autoAspectRatioByYDA: true
    })

    p.Article-Paragraph.
      Странно получать подобные сообщения о возможном похищении данных в отношении разрабатываемого нами сайта или
        приложения, запущенного на #[+SecondaryEntity__Code--YDID localhost], а не&nbsp;в интернете, не правда ли?
      Связано это с особенностями работы данной технологии безопасности.
      Одна из них заключается в том, что #[+Term--YDID доменное имя] привязывается в #[+Keyword--YDID контролируемому]
        #[+Keyword__Contrast--YDID набору] серверов, а #[+ImportantEntity__Code--YDID localhost] такой привязки
        #[+Keyword--YDID не]&nbsp;имеет и #[+Keyword--YDID не]&nbsp;#[+Keyword__Contrast--YDID может] иметь, так как
        #[+Keyphrase--YDID на каждой] машине #[+Keyword--YDID свой] сервер на #[+ImportantEntity--YDID localhost].
      Кроме того, гипотетически можно настроить компьютер так, чтобы #[+ImportantEntity--YDID localhost] вёл на
        какой-нибудь другой #[+Term--YDID домен] в интернете (eдва ли Вы захотите этим заниматься, но это может сделать
        вредоносное программное обеспечение).
      В итоге, браузерy #[+Keyword--YDID неизвестно], что именно скрывается за #[+ImportantEntity--YDID localhost],
        а потому он #[+Keyword--YDID не]&nbsp;доверяет #[+ImportantEntity--YDID localhost] #[+Keyword--YDID наравне] с
        опубликованными в интернете сайтами и приложениями, имеющих #[+Term--YDID цифровые сертификаты] сомнительного
        происхождения.

    p.Article-Paragraph.
      Как же заставить браузеры доверять самовыпущенным #[+Term--YDID сертификатам]?
      Это можно сделать без&nbsp;стороннего программного обеспечения, однако процесс будет зависеть от
        #[+Term--YDID операционной системы].
      Проще всего сделать это кроссплатформенно с помощью утилиты #[+ImportantEntity--YDID mkcert].
      Хотя и она имеет ограничения (например, на момент #[+SecondaryEntity--YDID весны 2024] года
        #[+Keyword--YDID не]&nbsp;поддерживался браузер #[+SecondaryEntity--YDID Firefox] для операционной
        системы #[+SecondaryEntity--YDID Windows]), в целом с её помощью можно заставить доверять самовыпущенным
        #[+Term--YDID парам сертификат-ключ] #[+Keyword--YDID большинство] популярных #[+Term--YDID браузеров]
        в #[+Keyword--YDID большинстве] популярных #[+Term--YDID операционных систем].


    //- ━━━ Выпуск пары сертификат/ключ для режима локальной разработки ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.SLL_KeyAndCertificateIssue.$heading,
      HTML_ID: localizedSectioning.SLL_KeyAndCertificateIssue.$anchor
    }).Article-Heading2

    p.Article-Paragraph
      | Утилита #[+ImportantEntity--YDID mkcert] #[+Keyword--YDID не]&nbsp;имеет отношения к
      |   #[+ImportantEntity--YDID Node.js] (а следовательно и к #[+ImportantEntity--YDID npm]), потому устанавливать
      |   ещё на компьютер предстоит с помощью стандартных для конкретной #[+Term--YDID операционной системы]
      |   #[+Term__Contrast--YDID пакетных менеджеров] (#[+ImportantEntity--YDID Chocolatey] для
      |   #[+ImportantEntity--YDID Windows], #[+ImportantEntity--YDID Homebrew] либо #[+ImportantEntity--YDID MacPorts]
      |   для #[+ImportantEntity--YDID macOS], а для #[+ImportantEntity--YDID Linux] установка чуть более сложная, но
      |   тоже возможна с использованием #[+ImportantEntity--YDID Homebrew]).
      | Актуальный способ установки утилиты Вы можете узнать на
      |
      +Link--YDF({
        unendorsedExternalURI: "https://github.com/FiloSottile/mkcert?tab=readme-ov-file"
      }).Article-Link официальной странице GitHub данного проекта
      | .
      | Можем также предложить Вашему вниманию
      |
      +Link--YDF({
        unendorsedExternalURI: "https://www.youtube.com/watch?v=1Zexy6_-6jM"
      }).Article-Link хорошее русскоязычное видео
      |
      |   по #[+SecondaryEntity__Code--YDID mkcert], только там тестовое веб-приложением написано на фреймворке
      |   #[+SecondaryEntity--YDID Django] для языка #[+SecondaryEntity--YDID Python], но
      |   #[+Keyphrase--YDID на этом этапе] нас интересует только #[+ImportantEntity--YDID mkcert].

    p.Article-Paragraph.
      После того, как установка утилиты завершена, выполните команду #[+ImportantEntity__Code--YDID mkcert -install].
      Данная команда устанавливает на компьютер #[+Term--YDID центр сертификации]
        (#[+Term--YDID Certification authority]), задача которого — подтверждать подлинность ключей шифрования.
      Эту команду #[+Keyword--YDID достаточно] выполнить #[+Keyword__Contrast--YDID один] раз
        #[+Keyphrase--YDID вне зависимости от того, сколько #[+Term--YDID сертификатов] и #[+Term--YDID ключей] Вы выпустите].

    p.Article-Paragraph.
      Итак, нам нужно, чтобы браузер доверял #[+Term--YDID сертификату], который мы выпустим для
        #[+ImportantEntity--YDID URI] #[+SecondaryEntity__Code--YDID https://127.0.0.1], а также, желательно, для
        #[+SecondaryEntity__Code--YDID https://localhost].
      Несмотря на то, что #[+SecondaryEntity__Code--YDID localhost] и #[+SecondaryEntity__Code--YDID 127.0.0.1]
        это, фактически, одно и то же, #[+ImportantEntity--YDID mkcert] должен объясняться перед браузерами за каждый
        из них в отдельности, потому и указать их при выполнении команды выпуска сертификата тоже
        #[+Keyword--YDID необходимо] #[+Keyword__Contrast--YDID оба]:

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash }).
        mkcert localhost 127.0.0.1

    p.Article-Paragraph.
      Появится сообщение о том, что были созданы файлы #[+SecondaryEntity--YDID localhost.pem] и
        #[+SecondaryEntity--YDID localhost-key.pem], а также срок действительности эти файлов:

    +ConsoleOutput--YDF.
      Created a new certificate valid for the following names 📜
        - "localhost"
        - "127.0.0.1"

      The certificate is at "./localhost+1.pem" and the key at "./localhost+1-key.pem" ✅

      It will expire on 18 July 2026

    p.Article-Paragraph.
      Согласитесь, не&nbsp;очень-то и понятно по именам файлов, что в них содержится, а потому мы их переименуем.
      Вообще, можно было указать имена файлов и через консольную команду, но при вводе длинной консольной команды легко
        ошибиться, потому переименуем в фалы с использование графического пользовательского интерфейса:
        #[+SecondaryEntity--YDID localhost.pem] в #[+SecondaryEntity--YDID SSL_Certificate.pem], а
        #[+SecondaryEntity--YDID localhost-key.pem] в #[+SecondaryEntity--YDID SSL_Key.pem].
      Хотя и с такими именами файлов всё ещё не&nbsp;понятно, к какому проекту соответствующе #[+Term--YDID сертификат]
        и #[+Term--YDID ключ] имеют отношение, ввиду того, что эти файлы будут храниться и использоваться
        #[+Keyword--YDID только] в данном проекте, можно остановиться на этих именах.
      Поместим эти файлы в папку #[+SecondaryEntity--YDID SSL] проекта.


    //- ━━━ Код приложения ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.code.$heading,
      HTML_ID: localizedSectioning.code.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+ImportantEntity--YDID YDB] поддерживает #[+ImportantEntity--YDID HTTPS] #[+Keyword--YDID без]&nbsp;плагинов.
      Всё что нужно — указать пути к выпущенным ранее #[+Term--YDID SSL-сертификату] и #[+Term--YDID ключу].
      Соответствующие #[+Term--YDID свойства] #[+ImportantEntity--YDID 1-ого] #[+Term--YDID параметра] у
        #[+Term__Contrast--YDID метода] #[+ImportantEntity__Code--YDID initializeAndStart] находится
        в группе #[+Term--YDID HTTPS] — её мы будем указывать на этот раз #[+Keyword--YDID вместо]
        #[+ImportantEntity__Code--YDID HTTP]:

    +CodeViewer--YDF.Article-CodeViewer
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
          import { HTTP_Methods } from "@yamato-daiwa/es-extensions";
          import Path from "path";


          Server.initializeAndStart({
            IP_Address: "127.0.0.1",
            HTTPS: {
              port: ProtocolDependentDefaultPorts.HTTPS,
        +CodeViewer-Explanation--YDF.
          Для #[+ImportantEntity--YDID HTTPS] #[+Term--YDID портом] #[+Keyphrase--YDID по умолчанию] является
            #[+ImportantEntity__Code--YDID 443].
          Опять же, нет необходимости это запоминать — достаточно осознавать, будем ли мы использовать
            #[+Term--YDID порт] по умолчанию или же какой-то другой.

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="3" indentationString="  ")
          SSL_CertificateFileRelativeOrAbsolutePath: Path.resolve(__dirname, "./SSL/cert.pem"),
          SSL_KeyFileRelativeOrAbsolutePath: Path.resolve(__dirname, "./SSL/key.pem"),
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            Указываем пути к #[+Term--YDID сертификату] и #[+Term--YDID ключу], созданных ранее.
            Относительные пути (#[+SecondaryEntity__Code--YDID SSL/cert.pem] и #[+SecondaryEntity__Code--YDID SSL/cert.pem]
              соответственно) тоже #[+Keyphrase--YDID в данном случае] будут работать, но #[+Keyword--YDID абсолютные]
              #[+Term--YDID пути] #[+Keyword__Contrast--YDID надёжнее].

          p.Article-Paragraph.
            Если у Вас вместо файлов #[+Term--YDID сертификата] и #[+Term--YDID ключа] уже имеются готовые строчные
              значения, то вместо этих двух #[+Term--YDID свойств] укажите
              #[+ImportantEntity__Code--YDID SSL_Certificate] и #[ImportantEntity__Code--YDID SSL_Key]
              #[+Keyword--YDID соответственно].

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="2" indentationString="  ")
          routing: [
              {
                route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
                async handler(_request: Request, response: Response): Promise<void> {
                  return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
                }
              }
            ]
          });

    p.Article-Paragraph.
      Группа #[+Term--YDID свойств] #[+ImportantEntity__Code--YDID HTTPS] #[+Keyword--YDID не]&nbsp;исключает группу
        #[+ImportantEntity__Code--YDID HTTP] #[+Keyphrase--YDID если используются разные #[+Term--YDID порты]], однако
        если у Вас есть возможность поддерживать #[+Term--YDID протокол HTTPS], а поддерживать
        #[+ImportantEntity--YDID HTTP] особых причин нет, то от #[+Keyword--YDID последнего] лучше
        #[+Keyword__Contrast--YDID отказаться].
      В последующих уроках хорошо было бы использовать #[+Keyword--YDID только] #[+Term--YDID протокол HTTPS],
        чтобы выработать к нему отношение как #[+Keyphrase--YDID стандарту безопасности].
      Но к сожалению, многие читатели не&nbsp;последуют нашей рекомендации изучать уроки последовательно,
        а потому столкнутся с трудностями при обеспечении поддержки #[+ImportantEntity--YDID HTTPS] в последующих уроках,
        из-за чего начиная со следующего урока мы вновь будет использовать #[+Term--YDID протокол HTTP].


    //- ━━━ Тестирование ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.testing.$heading,
      HTML_ID: localizedSectioning.testing.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      Запустим приложение с помощью #[+SecondaryEntity__Code--YDID ts-node EntryPoint.ts].
      На этот раз у нас прослушивание входящих запросов осуществляется на
        #[+SecondaryEntity__Code--YDID https://127.0.0.1:443] (двоеточие и номер #[+Term--YDID порта] можно опустить,
        #[+Keyphrase--YDID если #[+Term--YDID порт] по умолчанию]).
      Откроем этот адрес в браузере.
      Если все описанные ранее действия выполнены верно, а #[+ImportantEntity--YDID mkcert] поддерживаем Ваш браузер,
        то а браузере отобразиться страница с заголовком #[+SecondaryEntity__Code--YDID Hello, world!].
      Проверьте также #[+SecondaryEntity__Code--YDID https://localhost:443].
