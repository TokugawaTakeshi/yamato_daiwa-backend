extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.japanese.pug
  include ../../../SharedComponents/SharedComponents.japanese.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("HTTPS利用"),
        description: "「やまとダイワバックエンド」（技術名：「Yamato Daiwa Backend」、略：「YDB」）はHTTPSプロトコルの対応も取り組みで、構文も簡潔。"
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("tutorials.HTTPS");

    LanguageDropDownList__YDF_DK.setLinks({
      english: routing.english.tutorials.$children.HTTPS.$URI,
      russian: routing.russian.tutorials.$children.HTTPS.$URI
    });

    const localizedSectioning = routing.japanese.tutorials.$children.HTTPS.$sectioning;


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ HTTPS利用 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    h1.Article-Heading1= localizedRouting.tutorials.$children.HTTPS.$heading

    +ThisPageHasNotBeenCheckedByNativeSpeakersYetWarning

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning, SVG_Icon: true }).
      当授業で提示されたプロジェクト構成・コードは教材への最適化として#[+Keyphrase--YDID 可能な限り]#[+Keyword--YDID 簡素化]されたので、
        此れに#[+Keyphrase--YDID 真似し本物の営利的なウェブサイト・ウェブアプリケーションのコードを書いてはならない]。
      此の授業で習った知識を実践に活用するには、授業の内容を理解した上でコードサンプルを貴方の課題・スタイルガイドに適応する事。


    //- ━━━ 理論 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.theory.$heading,
      HTML_ID: localizedSectioning.theory.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+Keyphrase--YDID ローカル開発モードにとって]#[+Term--YDID HTTPプロトコル]を使っても問題無い場合が多いが、
        ウェブサイト・ウェブアプリケーションの#[+Keyphrase--YDID 本番の公開の際#[+Term--YDID HTTP]の利用は#[+Keyword--YDID 超非推薦]]。
      #[+Term--YDID HTTPプロトコル]を使うと、パスワードやクレジットカード番号の様な機密情報を含めて、データは暗号化#[+Keyword--YDID されていない]状態
        の#[+Keyword--YDID 儘]で交換されるので、マルウェア等に依り盗まれやすくなり、
        #[+Keyphrase--YDID 100%の確率でウイルスを発見出来るセキュリティソフトは存在していない]。
      たとえ個人情報を取り扱っていない簡単ウェブサイトでも、#[+Term--YDID HTTPプロトコル]の利用のせい#[+Term--YDID 検索エンジン]に
        低く評価される事に成ってしまうのだ。

    p.Article-Paragraph.
      上記の問題標準解決方法は#[+DefinableTerm--YDID HTTPSプロトコル]、情報交換の機密保護の為に#[+ImportantEntity--YDID SSL/TLS]と言う
        #[+Term--YDID 暗号化プロトコル]を利用する#[+Term--YDID HTTP]の#[+Keyword--YDID 拡張]である。
      #[+Term--YDID HTTPS]は#[+Term--YDID HTTP]の#[+Keyword--YDID 拡張]だからこそ、#[+Term--YDID 「HTTPリクエスト」]の様な用語は
        #[+Term--YDID HTTPSプロトコル]にでも使われる事に成っている。
      然し、#[+Term--YDID HTTPS]の魔法を活用するには、先ず下記のもの用意する事。

    dl.Article-DescriptionList

      dt デジタル証明書（公開鍵証明書）
      dd.
        #[+Term--YDID サーバ]を識別する大きな#[+Term--YDID 文字列]。
        此れの検問に依り、ブラウザー又は#[+Term--YDID HTTPリクエスト]が送信出来る他のソフトは当#[+Term--YDID サーバ]に信用出来るか、判断する。

      dt プライベートキー
      dd.
        信頼的な接続の調整の際、#[+Term--YDID サーバ]に使われている大きな#[+Term--YDID 文字列]。

    p.Article-Paragraph.
      #[+Term--YDID デジタル証明書]にせよ、#[+Term--YDID プライベートキー]にせよローカルマシンやサーバでファイルとして保管出来るが、実際に取り扱われるのは
        #[+Keyword--YDID 文字列]だ。

    p.Article-Paragraph.
      #[+Keyphrase--YDID プロダクションの場合]、#[+Keyword--YDID 限られた]有効期限の為、#[+Term--YDID デジタル証明書]と
      #[+Term__Contrast--YDID プライベートキー]を#[+Keyword--YDID 定期的に]#[+Keyword__Contrast--YDID 取得]
      #[+Keyword--YDID しなければいけない]（保安基準上）。
      常に、対面する事に成る可能性が高い#[+Term--YDID サーバ]のプロバイダー会社から取得可能。
      有料な#[+Term--YDID 証明書・キー]の種類も有り、無償な種類も在るが、幸いに現在だと、#[+Keyword--YDID 有料な]種類はセキュリティ対策が通常より
        厳しいサイト・アプリケーションにしか要らない（例えば銀行のアプリケーションや区役所・市役所のサービス等）。

    p.Article-Paragraph.
      #[+Keyphrase--YDID ローカル開発モードの場合]、#[+Term--YDID 証明書]と#[+Term--YDID キー]が#[+Keyword--YDID 自力]で発行出来る。
      発行手順自体は簡単だが、より難しい事は、発行された#[+Term--YDID 証明書]・#[+Term--YDID キー]に信用しても良い、とブラウザーに説得させる事。
      自分で発行された#[+Term--YDID 証明書]・#[+Term--YDID キー]は取得された#[+Term--YDID 証明書]・#[+Term--YDID キー]と
        #[+Keyword--YDID 同じ]セキュリティを確保しては要るが、ブラウザーが発行先を考慮し、信頼度が不十分な場合下記の様な通知が表示される。

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/01-HTTPS/Images/ConnectionIsNotPrivateBrowserError.japanese",
      imageAlternateText:
          "ブラウザーは「この接続ではプライバシーが保護されていません」と通知する。" +
          "SLL証明書への信頼度が不十分な事が原因になっている事が多い。",
      autoAspectRatioByYDA: true
    })

    p.Article-Paragraph.
      インターネットに在るサイト・アプリケーションではなく、自分がローカルで開発し、#[+SecondaryEntity__Code--YDID localhost]で起動されたサイト・
        アプリケーションに関してデータが盗まれる事恐れが有る事に就いて、上記の様な通知を受ける事は可笑しいのではないだろうか。
      理由は此のセキュリティの技術の特性に有り、其れの中一つは、#[+Term--YDID ドメイン名]が#[+Keyword--YDID 制御可能な]サーバの
        #[+Keyword--YDID 揃い]に結び付かれるが、#[+Keyword--YDID 各]端末の#[+ImportantEntity__Code--YDID localhost]に
        #[+Keyword--YDID 特殊の]サーバが有るので、此の様な結び付きが#[+ImportantEntity__Code--YDID localhost]にとっては
        #[+Keyword--YDID 有り得ない]。
      それに、パソコンを#[+ImportantEntity--YDID localhost]がインターネットに在る何れかのドメインへ遷移させる様に設定出来る
        （意識的に設計するまいが、勝ってに設定出来るウィルスソフトが存在している）。
      結果的に、ブラウザーにとって#[+ImportantEntity--YDID localhost]の本質が#[+Keyword--YDID 不明]で、疑わしい発行先からの
        #[+Term--YDID 証明書]を持っているインターネットに在るウェブサイト・ウェブアプリケーション#[+Keyword--YDID 並みに]
        #[+ImportantEntity--YDID localhost]に信用しない事に成っている。

    p.Article-Paragraph.
      それでは、ブラウザーに自力で発行した#[+Term--YDID 証明書]・#[+Term--YDID キー]を信用させるにはどうすれば良いだろう。
      第三者のソフトウェアを使わずに可能ではあるが、手順が#[+Term--YDID オペレーティングシステム]#[+Keyword--YDID 依存]。
      #[+Keyword--YDID クロスプラットフォーム]で、最も簡単な方法なら、#[+ImportantEntity--YDID mkcert]と言うユーティリティ。
      此れでも制限が有る（例えば、#[+SecondaryEntity--YDID 2024年の春]時点、#[+SecondaryEntity--YDID Windows]の場合
        #[+SecondaryEntity--YDID Firefox]ブラウザーに対応されていなかった）が、全体的に大抵の人気な#[+Term--YDID オペレーティングシステム]に於いて、
        過半数の人気ブラウザーに対応されている。


    //- ━━━ ロカール開発専用デジタル証明書・キーを発行 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.SLL_KeyAndCertificateIssue.$heading,
      HTML_ID: localizedSectioning.SLL_KeyAndCertificateIssue.$anchor
    }).Article-Heading2

    p.Article-Paragraph
      | #[+ImportantEntity--YDID mkcert]ユーティリティは#[+ImportantEntity--YDID Node.js]（従って#[+ImportantEntity--YDID npm]）
      |   には関係無いので、#[+Term--YDID オペレーティングシステム]依存の#[+Keyword--YDID 規定]#[+Term--YDID パッケージマネージャーマネージャー]
      |   で導入する事に成る（#[+ImportantEntity--YDID Windows]の場合は#[+ImportantEntity--YDID Chocolatey]、
      |   #[+ImportantEntity--YDID macOS]の場合は#[+ImportantEntity--YDID Homebrew]か#[+ImportantEntity--YDID MacPorts]、
      |   そして#[+ImportantEntity--YDID Linux]の場合も#[+ImportantEntity--YDID Homebrew]が利用可能だが、手順が少し複雑）。
      | 現在にとって正しい導入方法に就いては
      +Link--YDF({
        unendorsedExternalURI: "https://github.com/FiloSottile/mkcert?tab=readme-ov-file"
      }).Article-Link 当プロジェクトのGitHubページ
      |   迄参考して下さい。

    p.Article-Paragraph.
      導入が終わったら、#[+ImportantEntity__Code--YDID mkcert -install]を実行しよう。
      当コマンドはパソコンに認証局を導入し、此れの目標は暗号化キーの真実性を確認する事。
      尚、証明書をいくら発行するに成っても、#[+Keyphrase--YDID 当コマンドは#[+Keyword--YDID 一回]だけ実行する事は#[+Keyword--YDID 十分]]。

    p.Article-Paragraph.
      それでは、ブラウザーに#[+SecondaryEntity__Code--YDID https://127.0.0.1]言う#[+Term--YDID URI]、そして、出来るものなら、
        #[+SecondaryEntity__Code--YDID https://localhost]にとって発行される#[+Term--YDID 証明書]に信頼させるつもり。
      #[+SecondaryEntity__Code--YDID https://127.0.0.1]と#[+SecondaryEntity__Code--YDID https://localhost]が同じものだが、
        #[+ImportantEntity--YDID mkcert]がそれぞれのドメインを別当にブラウザーに紹介しなければいけないので、#[+Term--YDID 証明書]・
        #[+Term--YDID キー]を発行するコマンドの実行の際、#[+Keyword--YDID 両方]指定する事。

    +CodeViewer--YDF
      +CodeViewer-Listing--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.Bash }).
        mkcert localhost 127.0.0.1

    p.Article-Paragraph.
      #[+SecondaryEntity--YDID localhost.pem]と#[+SecondaryEntity--YDID localhost-key.pem]と言うファイルが発行された事と、これらの
        有効期限を含むメッセージが表示される。

    +ConsoleOutput--YDF.
      Created a new certificate valid for the following names 📜
        - "localhost"
        - "127.0.0.1"

      The certificate is at "./localhost+1.pem" and the key at "./localhost+1-key.pem" ✅

      It will expire on 18 July 2026

    p.Article-Paragraph.
      例え和訳が上手く出来るとしても、此のファイルに何が入っているか、ファイル名だけでは分からないのではないだろうか。
      それで、ファイル名を変えておこう。
      実は、コンソールコマンドの入力の時でもファイル名指定が可能ではあったが、長いコマンドを入力する時間違いやすいから、グラフィックユーザーインターフェースを利用し
        名前変更しよう。
      具体的には、#[+SecondaryEntity--YDID localhost.pem]を#[+SecondaryEntity--YDID SSL_Certificate.pem]へ、
        #[+SecondaryEntity--YDID localhost-key.pem]を#[+SecondaryEntity--YDID SSL_Key.pem]に変えてもらいたい。
      此の様な名前でも、該当している#[+Term--YDID 証明書]・#[+Term--YDID キー]が何方のプロジェクトに所属しているか、不明な儘だが、
        これらを此のプロジェクトのディレクトリの下に保存し、此のプロジェクトの為だけ使うので、此れ以上名前変更する必要は無い。
      最後に、プロジェクトのディレクトリの下に#[+SecondaryEntity--YDID SSL]フォルダを作成し、其方へ#[+Term--YDID 証明書]・#[+Term--YDID キー]
        ファイルを移動しよう。


    //- ━━━ アプリケーションコード ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.code.$heading,
      HTML_ID: localizedSectioning.code.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+ImportantEntity--YDID YDB]はプラグイン#[+Keyword--YDID 無し]で#[+ImportantEntity--YDID HTTPS]をサポートしている。
      必要な事は、先程発行した#[+Term--YDID キー]と#[+Term--YDID 証明書]へのパースを指定するぐらい。
      #[+ImportantEntity__Code--YDID initializeAndStart]#[+Term--YDID メソッド]の#[+ImportantEntity--YDID 一引数目]の該当している
        #[+Term--YDID プロパティ]は#[+Term--YDID HTTPS]群に在り、今回は#[+ImportantEntity__Code--YDID HTTP]群の
        #[+Keyword--YDID 代わりに]指定するのだ。

    +CodeViewer--YDF.Article-CodeViewer
      +CodeViewer-TabPanel--YDF({ codeLanguage: CodeViewer__YDF.SupportedCodesLanguages.TypeScript })

        +CodeViewer-PartialListing--YDF: :code_listing--yda
          import { Server, Request, Response, ProtocolDependentDefaultPorts } from "@yamato-daiwa/backend";
          import { HTTP_Methods } from "@yamato-daiwa/es-extensions";
          import Path from "path";


          Server.initializeAndStart({
            IP_Address: "127.0.0.1",
            HTTPS: {
              port: ProtocolDependentDefaultPorts.HTTPS,
        +CodeViewer-Explanation--YDF.
          #[+ImportantEntity--YDID HTTPS]にっとて規定#[+Term--YDID ポート]番号は#[+ImportantEntity__Code--YDID 443]。
          以前通り、暗記する必要はなく、規定かどうか意識するだけで良い。

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="3" indentationString="  ")
          SSL_CertificateFileRelativeOrAbsolutePath: Path.resolve(__dirname, "./SSL/cert.pem"),
          SSL_KeyFileRelativeOrAbsolutePath: Path.resolve(__dirname, "./SSL/key.pem"),
        +CodeViewer-Explanation--YDF

          p.Article-Paragraph.
            先程発行した#[+Term--YDID 証明書]と#[+Term--YDID キー]へのパスを指定しよう。
            相対パス即ちそれぞれ#[+SecondaryEntity__Code--YDID SSL/cert.pem]と#[+SecondaryEntity__Code--YDID SSL/cert.pem]も
              #[+Keyphrase--YDID 此の場合]指定しても良いが、絶対パスの方が#[+Keyword--YDID 安全]。

          p.Article-Paragraph.
            ファイルの代わりに文字列化済みの#[+Term--YDID 証明書]・#[+Term--YDID キー]を持っている場合、代わりに
              #[+ImportantEntity__Code--YDID SSL_Certificate]と#[ImportantEntity__Code--YDID SSL_Key]
              #[+Term--YDID プロパティ]を指定する事。

        +CodeViewer-PartialListing--YDF: :code_listing--yda(indentationMultiplier="2" indentationString="  ")
          routing: [
              {
                route: { HTTP_Method: HTTP_Methods.get, pathTemplate: "/" },
                async handler(_request: Request, response: Response): Promise<void> {
                  return response.submitWithSuccess({ HTML_Content: "<h1>Hello, world!</h1>" });
                }
              }
            ]
          });

    p.Article-Paragraph.
      #[+Keyphrase--YDID #[+Term--YDID ポート]番号が一致していない限り]、#[+ImportantEntity__Code--YDID HTTP群]と
        #[+ImportantEntity__Code--YDID HTTPS群]、両方指定可能。
      然し、#[+Term--YDID HTTPSプロトコル]の対応が可能で、#[+Term--YDID HTTPプロトコル]をサポートする理由が特に無ければ、
        #[+ImportantEntity__Code--YDID HTTP群]の指定を止めた方が良い。
      実は、#[+Term--YDID HTTPSプロトコル]を#[+Keyword--YDID 安全性規格]として見做す習慣を作る為に、次以降の授業に於いては
        #[+ImportantEntity__Code--YDID HTTPS群]のみにすれば良かった。
      だが残念ながら、授業を提案された順番通り受ける推薦を無視している方々が多いので、#[+ImportantEntity--YDID HTTPS]のみにすると、
        #[+ImportantEntity--YDID HTTPS]利用を確保出来ず困る方々も多い。
      それで、次の授業以降、又#[+Term--YDID HTTPプロトコル]を利用する。


    //- ━━━ テスティング ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: localizedSectioning.testing.$heading,
      HTML_ID: localizedSectioning.testing.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+SecondaryEntity__Code--YDID ts-node EntryPoint.ts]でアプリケーションを実行しよう。
      今回は#[+Term--YDID リクエスト]を#[+SecondaryEntity__Code--YDID https://127.0.0.1:443]で受付している
        （#[+Keyphrase--YDID 規定のポート番号である限り]、コロンとポート番号を無でも良い）。
      当アドレスをブラウザーに開こう。
      上記の行動を手順通り行い、#[+ImportantEntity--YDID mkcert]は貴方のブラウザーをサポートしているなら、「Hello, World!」と言う見出しを含む
        ページが表示される。
      #[+SecondaryEntity__Code--YDID https://localhost:443]も確認しておこう。
